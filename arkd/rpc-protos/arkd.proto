
syntax = "proto3";

package arkd;

/// Public ark service for arkd.
service ArkService {
	rpc GetArkInfo(Empty) returns (ArkInfo) {}
	rpc RequestOnboardCosign(OnboardCosignRequest) returns (OnboardCosignResponse) {}
	rpc GetFreshRounds(FreshRoundsRequest) returns (FreshRounds) {}
	rpc GetRound(RoundId) returns (RoundInfo) {}

	// * ARK ROUND INTERACTIONS *

	rpc SubscribeRounds(Empty) returns (stream RoundEvent) {}
	rpc SubmitPayment(SubmitPaymentRequest) returns (Empty) {}
	rpc ProvideVtxoSignatures(VtxoSignaturesRequest) returns (Empty) {}
	rpc ProvideForfeitSignatures(ForfeitSignaturesRequest) returns (Empty) {}
}

message ArkInfo {
	string network = 1;
	bytes pubkey = 2;
	bytes xonly_pubkey = 3;
	uint32 nb_round_nonces = 4;
	uint32 vtxo_exit_delta = 5;
	uint32 vtxo_expiry_delta = 6;
}

message OnboardCosignRequest {
	/// Serialized `UserPart`
	bytes user_part = 1;
}

message OnboardCosignResponse {
	bytes asp_part = 1;
}

message FreshRoundsRequest {
	uint32 start_height = 1;
}

message FreshRounds {
	repeated bytes txids = 1;
}

message RoundId {
	bytes txid = 1;
}

message RoundInfo {
	bytes round_tx = 1;
	bytes signed_vtxos = 2;
}

message RoundStart {
	uint64 round_id = 1;
	uint64 offboard_feerate_sat_vkb = 2;
}

message ForfeitNonces {
	bytes input_vtxo_id = 1;
	repeated bytes pub_nonces = 2;
}

message VtxoProposal {
	uint64 round_id = 1;
	bytes vtxos_spec = 2;
	/// The unsigned round tx.
	bytes round_tx = 3;
	repeated bytes vtxos_signers = 4;
	repeated bytes vtxos_agg_nonces = 5;
}

message RoundProposal {
	uint64 round_id = 1;
	/// Completely signed vtxo tree.
	bytes signed_vtxos = 2;
	/// The unsigned round tx.
	bytes round_tx = 3;
	repeated ForfeitNonces forfeit_nonces = 6;
}

message RoundFinished {
	uint64 round_id = 1;
	/// Completely signed vtxo tree.
	bytes signed_vtxos = 2;
	/// The signed round tx.
	bytes round_tx = 3;
}

message RoundEvent {
	oneof event {
		RoundStart start = 1;
		VtxoProposal vtxo_proposal = 2;
		RoundProposal round_proposal = 3;
		RoundFinished finished = 4;
	};
}

message Payment {
	uint64 amount = 1;
	oneof destination {
		bytes vtxo_public_key = 2;
		bytes offboard_spk = 3;
	};
}

message SubmitPaymentRequest {
	//TODO(stevenroose) add proof of vtxo ownership
	repeated bytes input_vtxos = 1;
	repeated Payment payments = 2;
	bytes cosign_pubkey = 3;
	repeated bytes public_nonces = 4;
}

message ForfeitSignatures {
	bytes input_vtxo_id = 1;
	repeated bytes pub_nonces = 2;
	repeated bytes signatures = 3;
}

message ForfeitSignaturesRequest {
	repeated ForfeitSignatures signatures = 1;
}

message VtxoSignaturesRequest {
	/// The cosign pubkey these signatures are for.
	bytes pubkey = 1;
	repeated bytes signatures = 2;
}


/// Administration service for arkd.
service AdminService {
	rpc WalletStatus(Empty) returns (WalletStatusResponse) {}
	rpc Stop(Empty) returns (Empty) {}
}

message WalletStatusResponse {
	string address = 1;
	uint64 balance = 2;
}

message Empty {}
